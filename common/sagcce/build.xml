<?xml version="1.0"?>
<project name="main" xmlns="antlib:org.apache.tools.ant" basedir="." default="setup" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <import file="antcc/main.xml" />

    <!-- standard header start -->
    <dirname file="${ant.file.main}" property="project.dir" />
    <property name="build.dir" location="${project.dir}/build" />
    <property name="install.dir" location="/opt/softwareag" />

    <property environment="env" />

    <target name="_localinit" depends=""></target>

    <target name="_localclean" depends="sagenv.clean">
    </target>

    <target name="setup" depends="setup_noclean, _localclean" />

    <!-- waitForTargetNodeUp -->
    <target name="setup_noclean" depends="templateApply" />

    <target name="setup_withccestart" depends="startcc,setup" />

    <target name="templateApply" description="Apply $CC_TEMPLATE" depends="waitcc,_localinit" >
        <property name="template.path" value="templates/${env.CC_TEMPLATE}" />
        <antcall target="sagenv.apply">
            <param name="t" value="${template.path}"/>
        </antcall>
    </target>

	<!-- modification fabien of antcc/sagrepo.xml -->
    <target name="register-licenses" depends="waitcc,sagenvInit" description="Register product licenses">
        <property file="${env.properties}" />
		<property name="licenses.dir" value="licenses" />

        <iterate target="_register-license-files">
			<fileset dir="${licenses.dir}" includes="**/*.zip" />
		</iterate>
    </target>
    
    <target name="_register-license-files">
		<property name="licenses.path" value="${dir}/${file}"/>
		<sequential>
            <echo>Registering license package ${licenses.path}</echo>
			<antcall target="licenses">
				<param name="licenses.zip.file" value="${licenses.path}" />
			</antcall>
 	    </sequential>
	</target>

	<target name="register-images" depends="waitcc,sagenvInit" description="Register product and fix images on the server">
		<property file="${env.properties}" />
		<property name="images.dir" value="images" />

		<cc command="list repository products includeHeaders=false properties=displayName" format="csv" outputproperty="productrepos" />
		<cc command="list repository fixes includeHeaders=false properties=displayName" format="csv" outputproperty="fixrepos" />
		<property name="aliases" value="${productrepos},${fixrepos}" />
		
		<echo>
			Current aliases: ${aliases}
		</echo>

		<iterate target="_register-image-files">
			<fileset dir="${images.dir}/products" includes="**/*.zip" />
			<fileset dir="${images.dir}/fixes" includes="**/*.zip" />
		</iterate>

		<echo>
			Registered product repositories
		</echo>
		<cc command="list repository products" format="tsv"/>
		
		<echo>
			Registered fix repositories
		</echo>
		<cc command="list repository fixes" format="tsv"/>
	</target>

	<target name="_register-image-files">
		<property name="alias" value="${filename}"/>
		<property name="image_type" value="${dirname}"/>
		
		<!-- clean the alias name -->
		<replace string="${alias}" find="/" replace="-" to="alias.clean" />
		<echo>${image_type}-${alias.clean}</echo>

		<!-- check if we already have this repo -->
		<contains list="${aliases}" item="${alias.clean}" property="exists" />

		<echo if:true="${exists}">${alias.clean}: already present!</echo>

		<sequential unless:true="${exists}">
            <echo>${image_type} - ${alias.clean}: registering ${dir}/${file}</echo>
			<cc command="add repository ${image_type} image name=${alias.clean} location=${dir}/${file} includeHeaders=false properties=id" format="csv" outputproperty="jobid"/>
			<waitforjob />
 	    </sequential>
	</target>

    <!-- Replace string -->
	<scriptdef language="javascript" name="replace">
		<attribute name="string" />
		<attribute name="find" />
		<attribute name="replace" />
		<attribute name="to" />
	    project.setProperty(attributes.get("to"),attributes.get("string").split(attributes.get("find")).join(attributes.get("replace")));
	</scriptdef>

	<!-- end of modification fabien of antcc/sagrepo.xml -->

    <target name="waitForTargetNodeUp" description="Wait for target node up" depends="_localinit">
        <!-- if host defined -->
        <set-property-if-nonempty name="socketcheck.target.host" if-property-isset="env.SOCKET_CHECK_TARGET_HOST" />
        <set-property-if-nonempty name="socketcheck.target.port" if-property-isset="env.SOCKET_CHECK_TARGET_PORT" />

        <!-- check target host connectivity -->
        <antcall target="_waitForSocketConnect">
            <param name="wait.host" value="${socketcheck.target.host}" if:set="socketcheck.target.host" />
            <param name="wait.port" value="${socketcheck.target.port}" if:set="socketcheck.target.port"/>
        </antcall>

        <!-- if host2 defined -->
        <set-property-if-nonempty name="socketcheck.target.host2" if-property-isset="env.SOCKET_CHECK_TARGET_HOST2" />
        <set-property-if-nonempty name="socketcheck.target.port2" if-property-isset="env.SOCKET_CHECK_TARGET_PORT2" />

        <!-- check target host connectivity -->
        <antcall target="_waitForSocketConnect">
            <param name="wait.host" value="${socketcheck.target.host2}" if:set="socketcheck.target.host2" />
            <param name="wait.port" value="${socketcheck.target.port2}" if:set="socketcheck.target.port2"/>
        </antcall>

        <!-- if host3 defined -->
        <set-property-if-nonempty name="socketcheck.target.host3" if-property-isset="env.SOCKET_CHECK_TARGET_HOST3" />
        <set-property-if-nonempty name="socketcheck.target.port3" if-property-isset="env.SOCKET_CHECK_TARGET_PORT3" />

        <!-- check target host connectivity -->
        <antcall target="_waitForSocketConnect">
            <param name="wait.host" value="${socketcheck.target.host3}" if:set="socketcheck.target.host3" />
            <param name="wait.port" value="${socketcheck.target.port3}" if:set="socketcheck.target.port3"/>
        </antcall>
    </target>

    <target name="_waitForSocketConnect" description="Wait for socker host:port is accessible">
        <condition property="wait.enabled">
            <and>
                <isset property="wait.host" />
                <isset property="wait.port" />
            </and>
        </condition>
        <property name="wait.enabled" value="false"/>

        <echo message="Checking connectivity to ${wait.host}:${wait.port}" if:true="${wait.enabled}"/>
        <waitfor maxwait="600" maxwaitunit="second" checkevery="5" checkeveryunit="second" if:true="${wait.enabled}">
            <socket server="${wait.host}" port="${wait.port}"/>
        </waitfor>
    </target>
    
    <target name="_tryRandom">
        <randomint max="100000000" property="random_prop" />
        <echo message="my random number: ${random_prop}" />
    </target>

    <macrodef name="set-property-if-nonempty">
        <attribute name="name" />
        <attribute name="if-property-isset" />
        <attribute name="value" default="${@{if-property-isset}}" />

        <sequential>
            <condition property="@{name}" value="@{value}">
                <and>
                    <isset property="@{if-property-isset}" />
                    <not>
                        <equals arg1="${@{if-property-isset}}" arg2="" />
                    </not>
                </and>
            </condition>
        </sequential>
    </macrodef>

    <scriptdef language="javascript" name="randomint">
        <attribute name="max" />
        <attribute name="property" />
        <![CDATA[
        project.setProperty(attributes.get("property"), getRandomInt(attributes.get("max")));
        function getRandomInt(max) {
          return Math.floor(Math.random() * Math.floor(max));
        }
        ]]>
    </scriptdef>
</project>